package com.example.demo.Controllers;

import com.example.demo.Configurations.ApplicationConfig;
import com.example.demo.DTO.DTOTestCase;
import com.example.demo.Entities.TestCaseEntity;
import com.example.demo.Services.TestCaseService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.annotation.CrossOrigin;

import java.util.List;


@RestController
@RequestMapping("/admin")
@CrossOrigin("http://localhost:3000")

public class TestCaseController {
    @Autowired
    private TestCaseService testCaseService;

    @Autowired
    private ApplicationConfig applicationConfig;

    @GetMapping("/testCase")
    public List<DTOTestCase> getAll() {
        return testCaseService.getAll();
    }

    @GetMapping("/testCaseByUser/{user_id}")
    public List<DTOTestCase> findByUserId(@PathVariable long user_id){
        return testCaseService.findByUserId(user_id);
    }

    @GetMapping("/testCase/search/{phrase}")
    public List <TestCaseEntity> searchTestCase(@PathVariable String phrase) {
        return testCaseService.getByTestCaseName(phrase);
    }


    @PostMapping("/register/testCase")
    @ResponseStatus(HttpStatus.CREATED)
    @ResponseBody
    public DTOTestCase createTestCase(@RequestBody DTOTestCase dTOTestCase) {
        TestCaseEntity testCaseEntity = convertDTOToEntity(dTOTestCase);
        TestCaseEntity addTestCase = testCaseService.addTestCase(testCaseEntity);
        return convertEntityToDto(addTestCase);   }

    @DeleteMapping("/deleteTestCase/{id}")
    public void deleteById(@PathVariable long id){
        testCaseService.deleteById(id);    }


    @PutMapping("/updateTestCase/{id}")
    public DTOTestCase updateTestCase(@PathVariable long id, @RequestBody DTOTestCase dTOTestCase) {
        TestCaseEntity testCaseEntity = convertDTOToEntity(dTOTestCase);
        TestCaseEntity updateTestCase = testCaseService.updateById(id, testCaseEntity);
        return convertEntityToDto(updateTestCase);
    }


    //CONVERTERS

    //Entity to DTO
    private DTOTestCase convertEntityToDto(TestCaseEntity testCaseEntity){
        DTOTestCase dTOTestCase = applicationConfig.modelMapper().map(testCaseEntity, DTOTestCase.class);
        return dTOTestCase;}

    //DTO to Entity
    private TestCaseEntity convertDTOToEntity(DTOTestCase dTOTestCase) {
        TestCaseEntity testCaseEntity = applicationConfig.modelMapper().map(dTOTestCase, TestCaseEntity.class);
        return testCaseEntity; }
}


