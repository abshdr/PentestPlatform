package com.example.demo.Controllers;

import com.example.demo.Configurations.ApplicationConfig;
import com.example.demo.DTO.DTOReport;
import com.example.demo.Entities.ProjectEntity;
import com.example.demo.Entities.ReportEntity;
import com.example.demo.Response.ResponseFile;
import com.example.demo.Response.ResponseMessage;
import com.example.demo.Services.ReportService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;


import java.util.List;
import java.util.stream.Collectors;


@RestController
@RequestMapping("/rest")
@CrossOrigin(origins="http://localhost:3000")

public class ReportController {
    @Autowired
    private ReportService reportService;

    @Autowired
    private ApplicationConfig applicationConfig;

    @GetMapping("/reports")
    public List<DTOReport> getAll() {
        return reportService.getAll();
    }

    @GetMapping("/reports/byproject/{project_id}")
    public List<DTOReport> getByprojectId(@PathVariable long project_id){
        return reportService.findByProjectId(project_id);
    }

    @PostMapping("/uploadReport")
    public ResponseEntity<ResponseMessage> uploadReport(@RequestParam("file") MultipartFile file,@RequestParam("project_id") ProjectEntity project) {
        String message = "";
        try {
            reportService.store(file, project);
            message = "Uploaded the file successfully: " + file.getOriginalFilename();
            return ResponseEntity.status(HttpStatus.OK).body(new ResponseMessage(message));
        } catch (Exception e) {
            message = "Could not upload the file: " + file.getOriginalFilename() + "!";
            return ResponseEntity.status(HttpStatus.EXPECTATION_FAILED).body(new ResponseMessage(message));
        }
    }


    @GetMapping("/download/reports")
    public ResponseEntity<List<ResponseFile>> getListFiles() {
        List<ResponseFile> files = reportService.getAllReports().map(reportEntity -> {
            String fileDownloadUri = ServletUriComponentsBuilder
                    .fromCurrentContextPath()
                    .path("/rest/downloadFiles/")
                    .path(reportEntity.getId())
                    .toUriString();
            return new ResponseFile(
                    reportEntity.getName(),
                    fileDownloadUri,
                    reportEntity.getType(),
                    reportEntity.getData().length);
        }).collect(Collectors.toList());
        return ResponseEntity.status(HttpStatus.OK).body(files);
    }

    @GetMapping("/downloadReport/{id}")
    public ResponseEntity<byte[]> getFile(@PathVariable String id) {
        ReportEntity reportEntity = reportService.getFile(id);
        return ResponseEntity.ok()
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + reportEntity.getName() + "\"")
                .body(reportEntity.getData());
    }

    






    //CONVERTERS

    //Entity to DTO
    private DTOReport convertEntityToDto(ReportEntity reportEntity){
        DTOReport dTOReport = applicationConfig.modelMapper().map(reportEntity, DTOReport.class);
        return dTOReport;}

    //DTO to Entity
    private ReportEntity convertDTOToEntity(DTOReport dTOReport) {
        ReportEntity reportEntity = applicationConfig.modelMapper().map(dTOReport, ReportEntity.class);
        return reportEntity; }
}

