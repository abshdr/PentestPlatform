package com.example.demo.Controllers;

import com.example.demo.Configurations.ApplicationConfig;
import com.example.demo.DTO.DTOProject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import com.example.demo.Entities.ProjectEntity;
import com.example.demo.Services.ProjectService;
import org.springframework.web.bind.annotation.CrossOrigin;
import java.util.List;
import java.util.Optional;


@RestController
@RequestMapping("/rest")
@CrossOrigin(origins="http://localhost:3000")

public class ProjectController {
    @Autowired
    private ProjectService projectService;

    @Autowired
    private ApplicationConfig applicationConfig;

    @GetMapping("/projects")
    public List<DTOProject> getAll() {
        return projectService.getAll();
    }

    @GetMapping("/projectById/{id}")
    public Optional<ProjectEntity> getById(@PathVariable long id){
        return projectService.findById(id);
    }

    @GetMapping("/projects/user/{user_id}")
    public List<DTOProject> findByUserId(@PathVariable long user_id) {
            return projectService.findByUserId(user_id);
    }

    @GetMapping("/projects/search/{phrase}")
    public List<ProjectEntity> searchProjects(@PathVariable String phrase) {
        return projectService.getByProjectName(phrase);
    }
    @GetMapping("/projects/user-Search/{user_id}/{phrase}")
    public List <ProjectEntity> searchByUser(@PathVariable long user_id, @PathVariable  String phrase) {

        return projectService.searchByUser(user_id, phrase);
    }

    @PostMapping("/register/project")
    @ResponseStatus(HttpStatus.CREATED)
    @ResponseBody
    public DTOProject createProject(@RequestBody DTOProject dTOProject) {
        ProjectEntity projectEntity = convertDTOToEntity(dTOProject);
        ProjectEntity addProject = projectService.addProject(projectEntity);
        return convertEntityToDto(addProject);   }

    @DeleteMapping("/deleteProject/{id}")
    public void deleteById(@PathVariable long id){
        projectService.deleteById(id);    }


    @PutMapping("/updateProject/{id}")
    public DTOProject updateProject(@PathVariable long id, @RequestBody DTOProject dTOProject) {
       ProjectEntity projectEntity = convertDTOToEntity(dTOProject);
       ProjectEntity updateProject = projectService.updateById(id, projectEntity);
       return convertEntityToDto(updateProject);
    }


    //CONVERTERS

    //Entity to DTO
    private DTOProject convertEntityToDto(ProjectEntity projectEntity){
        DTOProject dTOProject = applicationConfig.modelMapper().map(projectEntity, DTOProject.class);
        return dTOProject;}

    //DTO to Entity
    private ProjectEntity convertDTOToEntity(DTOProject dTOProject) {
        ProjectEntity projectEntity = applicationConfig.modelMapper().map(dTOProject, ProjectEntity.class);
        return projectEntity; }
}

