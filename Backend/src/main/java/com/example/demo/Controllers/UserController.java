package com.example.demo.Controllers;

import com.example.demo.DTO.DTOUser;
import com.example.demo.DTO.DTOUserRegisteration;
import com.example.demo.Configurations.ApplicationConfig;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import com.example.demo.Entities.UserEntity;
import com.example.demo.Services.UserService;
import org.springframework.web.bind.annotation.CrossOrigin;

import java.util.List;


@RestController
@CrossOrigin("http://localhost:3000")

public class UserController {

@Autowired
private UserService userService;

@Autowired
private ApplicationConfig applicationConfig;

     @GetMapping("/auth/users")
     @ResponseBody
     public List<DTOUser> getAllUsers() { return userService.getAllUsers(); }

     @GetMapping("/auth/whoami")
     public DTOUser whoAmI() {
        return convertEntityToDto(userService.whoAmI());
    }

     @PostMapping("/admin/register")
     public DTOUserRegisteration register(@RequestBody DTOUserRegisteration dTOUserRegisteration) {
     UserEntity userEntity = convertDtoToEntity(dTOUserRegisteration);
     UserEntity registerUser = userService.register(userEntity);
     return convertEntityToDTO(registerUser); }


    @DeleteMapping("/admin/users/{id}")
    public void deleteUser(@PathVariable long id) {
        userService.deleteUser(id);
    }

    @PostMapping("/admin/users/{id}")
    public DTOUser updateUser(@PathVariable long id, @RequestBody DTOUser dTOUser) {
        UserEntity userEntity = convertDTOToEntity(dTOUser);
        UserEntity updateUser = userService.updateById(id, userEntity);
        return convertEntityToDto(updateUser); }

    @GetMapping("/admin/users/userGroup/{usergroup_id}")
    public List<UserEntity> getByUserGroupId (@PathVariable long usergroup_id){
            return userService.findByUserGroupId(usergroup_id);
    }

    //CONVERTERS SPECIFIC FOr DTOUSER
    //Entity to DTO
    private DTOUser convertEntityToDto(UserEntity userEntity){
        DTOUser dTOUser = applicationConfig.modelMapper().map(userEntity, DTOUser.class);
        return dTOUser;}

   //DTO to Entity
    private UserEntity convertDTOToEntity(DTOUser dTOUser) {
        UserEntity userEntity = applicationConfig.modelMapper().map(dTOUser, UserEntity.class);
        return userEntity; }


    //CONVERTERS SPECIFIC FOR DTOUSERREGISTERATION
    //Entity to DTO
    private DTOUserRegisteration convertEntityToDTO(UserEntity userEntity){
        DTOUserRegisteration dTOUserRegisteration = applicationConfig.modelMapper().map(userEntity, DTOUserRegisteration.class);
        return dTOUserRegisteration;}

    //DTO to Entity
    private UserEntity convertDtoToEntity(DTOUserRegisteration dTOUserRegisteration) {
        UserEntity userEntity = applicationConfig.modelMapper().map(dTOUserRegisteration, UserEntity.class);
        return userEntity; }
}





