package com.example.demo.Controllers;

import com.example.demo.Configurations.ApplicationConfig;
import com.example.demo.DTO.DTOScript;
import com.example.demo.Entities.ScriptEntity;
import com.example.demo.Entities.TestCaseEntity;
import com.example.demo.Response.ResponseMessage;
import com.example.demo.Services.ScriptService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

@RestController
@RequestMapping("/admin")
@CrossOrigin("http://localhost:3000")
public class ScriptController {
    @Autowired
    private ScriptService scriptService;

    @Autowired
    private ApplicationConfig applicationConfig;

    @PostMapping("/upload")
    public ResponseEntity<ResponseMessage> uploadFile(@RequestParam("file") MultipartFile file, @RequestParam("testcase_id")TestCaseEntity testCase) {
        String message = "";
        try {
            scriptService.store(file, testCase);
            message = "Uploaded the file successfully: " + file.getOriginalFilename();
            return ResponseEntity.status(HttpStatus.OK).body(new ResponseMessage(message));
        } catch (Exception e) {
            message = "Could not upload the file: " + file.getOriginalFilename() + "!";
            return ResponseEntity.status(HttpStatus.EXPECTATION_FAILED).body(new ResponseMessage(message));
        }
    }

    @DeleteMapping("/deleteScript/{id}")
    public void deleteById(@PathVariable String id){
        scriptService.deleteById(id);    }


    @PutMapping("/updateScript/{id}")
    public DTOScript updateScript(@PathVariable String id, @RequestBody DTOScript dTOScript) {
        ScriptEntity scriptEntity = convertDTOToEntity(dTOScript);
        ScriptEntity updateScript = scriptService.updateById(id, scriptEntity);
        return convertEntityToDto(updateScript);
    }








    //CONVERTERS

    //Entity to DTO
    private DTOScript convertEntityToDto(ScriptEntity scriptEntity){
        DTOScript dTOScript = applicationConfig.modelMapper().map(scriptEntity, DTOScript.class);
        return dTOScript;}

    //DTO to Entity
    private ScriptEntity convertDTOToEntity(DTOScript dTOScript) {
        ScriptEntity scriptEntity = applicationConfig.modelMapper().map(dTOScript, ScriptEntity.class);
        return scriptEntity; }
}

