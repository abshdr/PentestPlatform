package com.example.demo.Controllers;


import com.example.demo.Configurations.ApplicationConfig;
import com.example.demo.DTO.DTOScript;
import com.example.demo.DTO.DTOTestCase;
import com.example.demo.Entities.ScriptEntity;
import com.example.demo.Entities.TestCaseEntity;
import com.example.demo.Response.ResponseFile;
import com.example.demo.Services.ScriptService;
import com.example.demo.Services.TestCaseService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/rest")
@CrossOrigin(origins="http://localhost:3000")
public class UserEndpoints {

    @Autowired
    private ScriptService scriptService;
    @Autowired
    private TestCaseService testCaseService;
    @Autowired
    private ApplicationConfig applicationConfig;

    @GetMapping("/allTestcases")
    public List<DTOTestCase> getAllTestCases() {
        return testCaseService.getAll();
    }

    @GetMapping("/testCase/search/{phrase}")
    public List <TestCaseEntity> searchTestCase(@PathVariable String phrase) {
        return testCaseService.getByTestCaseName(phrase);
    }

    @GetMapping("testCaseByid/{id}")
    public List<DTOTestCase> getById(@PathVariable long id) {
        return testCaseService.findById(id);
    }

    @GetMapping("/scripts")
    public List<DTOScript> getAllScripts() {
        return scriptService.getAll();
    }

    @GetMapping("/scripts/byTestCase/{testCase_id}")
    public List<DTOScript> getScriptsBytestCaseId(@PathVariable long testCase_id){
        return scriptService.findByTestCaseId(testCase_id);
    }
    @GetMapping("/files")
    public ResponseEntity<List<ResponseFile>> getListFiles() {
        List<ResponseFile> files = scriptService.getAllFiles().map(scriptEntity -> {
            String fileDownloadUri = ServletUriComponentsBuilder
                    .fromCurrentContextPath()
                    .path("/rest/downloadFiles/")
                    .path(scriptEntity.getId())
                    .toUriString();
            return new ResponseFile(
                    scriptEntity.getName(),
                    fileDownloadUri,
                    scriptEntity.getType(),
                    scriptEntity.getData().length);
        }).collect(Collectors.toList());
        return ResponseEntity.status(HttpStatus.OK).body(files);
    }

    @GetMapping("/downloadFiles/{id}")
    public ResponseEntity<byte[]> getFile(@PathVariable String id) {
        ScriptEntity scriptEntity = scriptService.getFile(id);
        return ResponseEntity.ok()
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + scriptEntity.getName() + "\"")
                .body(scriptEntity.getData());
    }


    //CONVERTERS

    private DTOScript convertEntityToDto(ScriptEntity scriptEntity){
        DTOScript dTOScript = applicationConfig.modelMapper().map(scriptEntity, DTOScript.class);
        return dTOScript;}

    //DTO to Entity
    private ScriptEntity convertDTOToEntity(DTOScript dTOScript) {
        ScriptEntity scriptEntity = applicationConfig.modelMapper().map(dTOScript, ScriptEntity.class);
        return scriptEntity; }

}
