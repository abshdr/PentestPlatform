package com.example.demo.Controllers;
import com.example.demo.Configurations.ApplicationConfig;
import com.example.demo.DTO.DTOUserGroup;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import com.example.demo.Entities.UserGroupEntity;
import com.example.demo.Services.UserGroupService;
import org.springframework.web.bind.annotation.CrossOrigin;

import java.util.List;


@RestController
@RequestMapping("/admin")
@CrossOrigin(origins="http://localhost:3000")

public class UserGroupController {
    @Autowired
    private UserGroupService userGroupService;

    @Autowired
    private ApplicationConfig applicationConfig;

    @GetMapping("/userGroups")
    public List<DTOUserGroup> getAll() {
        return userGroupService.getAll();
    }

    @PostMapping("/register/userGroup")
    @ResponseStatus(HttpStatus.CREATED)
    @ResponseBody
    public DTOUserGroup createUserGroup(@RequestBody DTOUserGroup dTOUserGroup) {
        UserGroupEntity userGroupEntity = convertDTOToEntity(dTOUserGroup);
        UserGroupEntity addUserGroup = userGroupService.addUserGroup(userGroupEntity);
        return convertEntityToDto(addUserGroup);   }

    @DeleteMapping("/deleteUserGroup/{id}")
    public void deleteById(@PathVariable long id){
        userGroupService.deleteById(id);    }


    @PutMapping("/updateUserGroup/{id}")
    public DTOUserGroup updateUserGroup(@PathVariable long id, @RequestBody DTOUserGroup dTOUserGroup) {
        UserGroupEntity userGroupEntity = convertDTOToEntity(dTOUserGroup);
        UserGroupEntity updateUserGroup = userGroupService.updateById(id, userGroupEntity);
        return convertEntityToDto(updateUserGroup);
    }

    //CONVERTERS

    //Entity to DTO
    private DTOUserGroup convertEntityToDto(UserGroupEntity userGroupEntity){
        DTOUserGroup dTOUserGroup = applicationConfig.modelMapper().map(userGroupEntity, DTOUserGroup.class);
        return dTOUserGroup;}

    //DTO to Entity
    private UserGroupEntity convertDTOToEntity(DTOUserGroup dTOUserGroup) {
        UserGroupEntity userGroupEntity = applicationConfig.modelMapper().map(dTOUserGroup, UserGroupEntity.class);
        return userGroupEntity; }


}





