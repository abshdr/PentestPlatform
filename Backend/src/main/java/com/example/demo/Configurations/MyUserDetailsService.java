package com.example.demo.Configurations;

import com.example.demo.Entities.UserEntity;
import com.example.demo.Repositories.UserRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import javax.annotation.PostConstruct;


@Service
public class MyUserDetailsService implements org.springframework.security.core.userdetails.UserDetailsService {

    private BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
    public BCryptPasswordEncoder getEncoder() { return encoder; }


    @Autowired
    private UserRepo userRepo;

    @PostConstruct
    private void createDefaultUser(){
        if(userRepo.findByUsername("lasse74") == null){
            addUser(new UserEntity("lasse74", "abc123", "ROLE_ADMIN"));
        }
    }

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        UserEntity user = userRepo.findByUsername(username);
        if (user == null) {
            throw new UsernameNotFoundException(username);
        }
        return user;
    }

    public UserEntity register(UserEntity user) {
        user.setPassword(encoder.encode(user.getPassword()));
        try {
            return userRepo.save(user);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return null;
    }

    public UserEntity addUser(UserEntity user){
        user.setPassword(encoder.encode(user.getPassword()));
        try{
            return userRepo.save(user);
        } catch (Exception ex){
            ex.printStackTrace();
        }
        return null;
    }


}