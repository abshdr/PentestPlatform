package com.example.demo.Services;

import com.example.demo.Configurations.MyUserDetailsService;
import com.example.demo.DTO.DTOUser;
import com.example.demo.Entities.UserEntity;
import com.example.demo.Repositories.UserRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class UserService {

@Autowired
private UserRepo userRepo;

@Autowired
private MyUserDetailsService detailsService;

        public UserEntity whoAmI() {
                Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if(authentication != null) {
            String username = authentication.getName();
            return userRepo.findByUsername(username);
        }

        return null;
    }

        public UserEntity register(UserEntity userEntity) { return detailsService.register(userEntity); }

        public UserEntity getById(long id) {
        Optional<UserEntity> user = userRepo.findById(id);
        return user.orElse(null); }

        public List<UserEntity> getAll () {
            return userRepo.findAll();
        }

        public List<DTOUser> getAllUsers(){
                return userRepo.findAll()
                        .stream()
                        .map(this::convertEntityToDto)
                        .collect(Collectors.toList());
        }

        public void deleteUser(long id) {
        userRepo.deleteById(id);
    }

        public UserEntity updateById(long id, UserEntity userEntity) {
        UserEntity userFromDB = getById(id);
        if (userFromDB != null) {
            userEntity.setId(id);
            // don't update password
            userEntity.setPassword(userFromDB.getPassword());
            return userRepo.save(userEntity);
        }
        return null;
    }

        public List<UserEntity> findByUserGroupId(long usergroup_id) {
        return userRepo.findByUserGroupId(usergroup_id);
    }

        //CONVERTERS

        //Entity to DTO
        private DTOUser convertEntityToDto(UserEntity userEntity){
        DTOUser dtoUser = new DTOUser();
        dtoUser.setUsername(userEntity.getUsername());
        return dtoUser;     }


}


