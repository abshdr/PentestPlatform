package com.example.demo.Services;


import com.example.demo.Configurations.ApplicationConfig;
import com.example.demo.DTO.DTOReport;
import com.example.demo.Entities.ProjectEntity;
import com.example.demo.Entities.ReportEntity;
import com.example.demo.Entities.ScriptEntity;
import com.example.demo.Repositories.ReportRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@Service
public class ReportService {

    @Autowired
    private ReportRepo reportRepo;

    @Autowired
    private ApplicationConfig applicationConfig;


    public List<DTOReport> getAll() {
        return reportRepo.findAll().
            stream()
            .map(this::convertEntityToDto)
            .collect(Collectors.toList()); }

    public List<DTOReport> findByProjectId(long project_id) {
        return reportRepo.findByProjectId(project_id).
                stream()
                .map(this::convertEntityToDto)
                .collect(Collectors.toList());

    }




    public void deleteById(long id) { reportRepo.deleteById(id);}


    public ReportEntity store(MultipartFile file, ProjectEntity project) throws IOException {
        String fileName = StringUtils.cleanPath(file.getOriginalFilename());
        Date date = Calendar.getInstance().getTime();
        DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd hh:mm:ss");
        String timeStamp = dateFormat.format(date);

        ReportEntity reportEntity = new ReportEntity(fileName, project, file.getContentType(), file.getBytes(), timeStamp);
        return reportRepo.save(reportEntity);
    }

    public ReportEntity getFile(String id){
        return reportRepo.findByid(id);
    }
    public Stream<ReportEntity> getAllReports(){
        return reportRepo.findAll().stream();
    }






    //CONVERTERS

    //Entity to DTO
    private DTOReport convertEntityToDto(ReportEntity reportEntity){
        DTOReport dTOReport = applicationConfig.modelMapper().map(reportEntity, DTOReport.class);
        return dTOReport;}

    //DTO to Entity
    private ReportEntity convertDTOToEntity(DTOReport dTOReport) {
        ReportEntity reportEntity = applicationConfig.modelMapper().map(dTOReport, ReportEntity.class);
        return reportEntity; }


}
