package com.example.demo.Services;


import com.example.demo.Configurations.ApplicationConfig;
import com.example.demo.DTO.DTOScript;
import com.example.demo.Entities.ScriptEntity;
import com.example.demo.Entities.TestCaseEntity;
import com.example.demo.Repositories.ScriptRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@Service
public class ScriptService {

    @Autowired
    private ScriptRepo scriptRepo;

    @Autowired
    private ApplicationConfig applicationConfig;


    public List<DTOScript> getAll() {
        return scriptRepo.findAll().
                stream()
                .map(this::convertEntityToDto)
                .collect(Collectors.toList()); }


    public List<DTOScript> findByTestCaseId(long testCase_id) {
        return scriptRepo.findByTestCaseId(testCase_id).
                stream()
                .map(this::convertEntityToDto)
                .collect(Collectors.toList());

    }



    public ScriptEntity store(MultipartFile file, TestCaseEntity testCase) throws IOException {
        String fileName = StringUtils.cleanPath(file.getOriginalFilename());
        ScriptEntity scriptEntity = new ScriptEntity(fileName, file.getContentType(), file.getBytes(), testCase);
        return scriptRepo.save(scriptEntity);
    }






    public ScriptEntity getFile(String id){
        return scriptRepo.findById(id).get();
    }

    public Stream<ScriptEntity> getAllFiles(){
        return scriptRepo.findAll().stream();
    }






    public void deleteById(String id) { scriptRepo.deleteById(id);}


    public ScriptEntity updateById(String id, ScriptEntity scriptEntity) {
        if(scriptRepo.existsById(id)) {
            scriptEntity.setId(id);
            scriptRepo.save(scriptEntity);}
        return null;
    }








    //CONVERTERS

    //Entity to DTO
    private DTOScript convertEntityToDto(ScriptEntity scriptEntity){
        DTOScript dTOScript = applicationConfig.modelMapper().map(scriptEntity, DTOScript.class);
        return dTOScript;}

    //DTO to Entity
    private ScriptEntity convertDTOToEntity(DTOScript dTOScript) {
        ScriptEntity scriptEntity = applicationConfig.modelMapper().map(dTOScript, ScriptEntity.class);
        return scriptEntity; }



}
