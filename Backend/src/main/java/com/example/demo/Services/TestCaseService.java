package com.example.demo.Services;

import com.example.demo.Configurations.ApplicationConfig;
import com.example.demo.DTO.DTOTestCase;
import com.example.demo.Entities.TestCaseEntity;
import com.example.demo.Repositories.TestCaseRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class TestCaseService {

    @Autowired
    private TestCaseRepo testCaseRepo;

    @Autowired
    private ApplicationConfig applicationConfig;


    public List<DTOTestCase> getAll() {return testCaseRepo.findAll().
            stream()
            .map(this::convertEntityToDto)
            .collect(Collectors.toList()); }

    public List<TestCaseEntity> getByTestCaseName(String phrase) {
        List  <TestCaseEntity> allTestCases = testCaseRepo.findAll();
        List <TestCaseEntity> filteredTestCases = new ArrayList<>();

        for(TestCaseEntity testCase : allTestCases) {
            if(testCase.getTitle().toLowerCase().contains(phrase.toLowerCase()))
            {
                filteredTestCases.add(testCase);
            }

        }
        return filteredTestCases;


    }


    public List<DTOTestCase> findByUserId(long user_id) {
        return testCaseRepo.findByUserId(user_id).
                stream()
                .map(this::convertEntityToDto)
                .collect(Collectors.toList());
    }

    public List<DTOTestCase> findById(long id) {
        return testCaseRepo.findById(id).
                stream()
                .map(this::convertEntityToDto)
                .collect(Collectors.toList());
    }

    public TestCaseEntity addTestCase(TestCaseEntity testCaseEntity)
    {      return testCaseRepo.save(testCaseEntity); }


    public void deleteById(long id) { testCaseRepo.deleteById(id);}


    public TestCaseEntity updateById(long id, TestCaseEntity testCaseEntity) {
        if(testCaseRepo.existsById(id)) {
            testCaseEntity.setId(Long.parseLong(String.valueOf(id)));
            testCaseRepo.save(testCaseEntity);}
        return null;
    }



    //CONVERTERS

    //Entity to DTO
    private DTOTestCase convertEntityToDto(TestCaseEntity testCaseEntity){
        DTOTestCase dTOTestCase = applicationConfig.modelMapper().map(testCaseEntity, DTOTestCase.class);
        return dTOTestCase;}

    //DTO to Entity
    private TestCaseEntity convertDTOToEntity(DTOTestCase dTOTestCase) {
        TestCaseEntity testCaseEntity = applicationConfig.modelMapper().map(dTOTestCase, TestCaseEntity.class);
        return testCaseEntity; }



}
