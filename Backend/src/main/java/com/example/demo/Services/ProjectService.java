package com.example.demo.Services;


import com.example.demo.DTO.DTOProject;
import com.example.demo.Configurations.ApplicationConfig;
import com.example.demo.Entities.ProjectEntity;
import com.example.demo.Repositories.ProjectRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class ProjectService {

    @Autowired
    private ProjectRepo projectRepo;

    @Autowired
    private ApplicationConfig applicationConfig;


    public List<DTOProject> getAll() {return projectRepo.findAll()
            .stream()
            .map(this::convertEntityToDto)
            .collect(Collectors.toList()); }

    public Optional<ProjectEntity> findById(long id) {
        return projectRepo.findById(id);
    }

    public List<ProjectEntity> getByProjectName(String phrase){

        List<ProjectEntity> AllProjects = projectRepo.findAll();
        List<ProjectEntity> filteredProjects = new ArrayList<>();

    for(ProjectEntity project : AllProjects) {
        if(project.getTitle().toLowerCase().contains(phrase.toLowerCase()))
        {
            filteredProjects.add(project);
        }

    }
        return filteredProjects;

    }

    public List<ProjectEntity> searchByUser(long user_id, String phrase) {

        List<ProjectEntity> AllProjectsByUserId = projectRepo.findByUserId(user_id);
        List<ProjectEntity> filteredProjects = new ArrayList<>();

        for(ProjectEntity project : AllProjectsByUserId) {
            if(project.getTitle().toLowerCase().contains(phrase.toLowerCase()))
            {
                filteredProjects.add(project);
            }

        }
        return filteredProjects;


    }





    public List<DTOProject> findByUserId(long user_id) {
        return projectRepo.findByUserId(user_id)
                .stream()
                .map(this::convertEntityToDto)
                .collect(Collectors.toList());
    }

    public ProjectEntity addProject(ProjectEntity projectEntity)
    {      return projectRepo.save(projectEntity); }


    public void deleteById(long id) { projectRepo.deleteById(id);}


    public ProjectEntity updateById(long id, ProjectEntity projectEntity) {
        if(projectRepo.existsById(id)) {
            projectEntity.setId(id);
            projectRepo.save(projectEntity);}
        return null;
    }

                            //CONVERTERS

    //Entity to DTO
    private DTOProject convertEntityToDto(ProjectEntity projectEntity){
        DTOProject dTOProject = applicationConfig.modelMapper().map(projectEntity, DTOProject.class);
        return dTOProject;}

    //DTO to Entity
    private ProjectEntity convertDTOToEntity(DTOProject dTOProject) {
        ProjectEntity projectEntity = applicationConfig.modelMapper().map(dTOProject, ProjectEntity.class);
        return projectEntity; }



}
